{"version":3,"file":"static/js/682.17c8794b.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/App.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","redux/filter/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\n\n// export const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.contacts;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  padding: 4em;\n`;\n","import './Section.scss';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <>\n      <h2 className=\"Title\">{title}</h2>\n      {children}\n    </>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport './ContactForm.scss';\n\nexport function ContactForm() {\n  const loginInputId = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    if (!contacts) return;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    )\n      return alert(`${name} is alredy in contacts`);\n    dispatch(addContacts(name, number));\n    // await addContacts({ name, phone });\n    form.reset();\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <label htmlFor={loginInputId} className=\"Form__label\">\n        Name\n        <input\n          className=\"Form__input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={loginInputId} className=\"Form__label\">\n        Number\n        <input\n          className=\"Form__input\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className=\"Form__btn\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport './Filter.scss';\nimport { changeFilter } from '../../redux/filter/slice';\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <label className=\"Filter__label\">\n      Фильтр по имени\n      <input\n        className=\"Filter__input\"\n        type=\"text\"\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n","export const selectFilters = state => state.filters.filter;\n","import './ContactList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilters } from 'redux/filter/selectors';\nimport { selectAllContacts, selectLoading } from 'redux/contacts/selectors';\nimport { deleteContacts } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const filter = useSelector(selectFilters);\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n  const Loading = useSelector(selectLoading);\n\n  if (!contacts) return;\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <ul className=\"ContactList\">\n        {filteredContacts.map(({ id, name, phone }) => (\n          <li key={id} className=\"ContactList__item\">\n            <p className=\"ContactList__text\">{name}:</p>\n            <span className=\"ContactList__span\">{phone}</span>\n            <button\n              type=\"button\"\n              className=\"ContactList__btn\"\n              onClick={() => dispatch(deleteContacts(id))}\n              disabled={Loading}\n            >\n              Удалить\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Wrapper } from 'components/App.styled';\nimport { Section } from 'components/Section/Section';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Your contacts</title>\n      <Wrapper className=\"Reviews\">\n        <Section title={'Phonebook'}>\n          <ContactForm />\n        </Section>\n        <div>{isLoading && 'Request in progress...'}</div>\n        <Section title={'Contacts'}>\n          <Filter />\n          <ContactList />\n        </Section>\n      </Wrapper>\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","isLoading","selectAllContacts","Wrapper","styled","Section","title","children","className","ContactForm","loginInputId","nanoid","dispatch","useDispatch","useSelector","handleSubmit","e","preventDefault","form","currentTarget","name","elements","value","number","find","contact","toLowerCase","alert","addContacts","reset","onSubmit","htmlFor","type","pattern","required","Filter","onChange","changeFilter","target","selectFilters","filters","filter","ContactList","Loading","filteredContacts","includes","map","id","phone","onClick","deleteContacts","disabled","Contacts","useEffect","fetchContacts"],"sourceRoot":""}